use std::fmt::Display;

pub enum OpCode {
    Constant,
    None,
    True,
    False,
    Pop,
    GetLocal,
    SetLocal,
    GetGlobal,
    DefineGlobal,
    SetGlobal,
    GetUpvalue,
    SetUpvalue,
    GetProperty,
    SetProperty,
    GetSuper,
    Equal,
    Greater,
    Less,
    Add,
    Subtract,
    Multiply,
    Divide,
    Not,
    Negate,
    Print,
    Jump,
    JumpIfFalse,
    Loop,
    Call,
    Invoke,
    SuperInvoke,
    Closure,
    CloseUpvalue,
    Return,
    Struct,
    Inherit,
    Method,
    Unknown,
}

impl From<u8> for OpCode {
    fn from(value: u8) -> Self {
        match value {
            0 => Self::Constant,
            1 => Self::None,
            2 => Self::True,
            3 => Self::False,
            4 => Self::Pop,
            5 => Self::GetLocal,
            6 => Self::SetLocal,
            7 => Self::GetGlobal,
            8 => Self::DefineGlobal,
            9 => Self::SetGlobal,
            10 => Self::GetUpvalue,
            11 => Self::SetUpvalue,
            12 => Self::GetProperty,
            13 => Self::SetProperty,
            14 => Self::GetSuper,
            15 => Self::Equal,
            16 => Self::Greater,
            17 => Self::Less,
            18 => Self::Add,
            19 => Self::Subtract,
            20 => Self::Multiply,
            21 => Self::Divide,
            22 => Self::Not,
            23 => Self::Negate,
            24 => Self::Print,
            25 => Self::Jump,
            26 => Self::JumpIfFalse,
            27 => Self::Loop,
            28 => Self::Call,
            29 => Self::Invoke,
            30 => Self::SuperInvoke,
            31 => Self::Closure,
            32 => Self::CloseUpvalue,
            33 => Self::Return,
            34 => Self::Struct,
            35 => Self::Inherit,
            36 => Self::Method,
            _ => Self::Unknown,
        }
    }
}

impl Into<u8> for OpCode {
    fn into(self) -> u8 {
        self as u8
    }
}

impl Display for OpCode {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Constant => write!(f, "Constant"),
            Self::None => write!(f, "Nil"),
            Self::True => write!(f, "True"),
            Self::False => write!(f, "False"),
            Self::Pop => write!(f, "Pop"),
            Self::GetLocal => write!(f, "Getlocal"),
            Self::SetLocal => write!(f, "Setlocal"),
            Self::GetGlobal => write!(f, "GetGlobal"),
            Self::DefineGlobal => write!(f, "DefineGlobal"),
            Self::SetGlobal => write!(f, "SetGlobal"),
            Self::GetUpvalue => write!(f, "GetUpvalue"),
            Self::SetUpvalue => write!(f, "SetUpvalue"),
            Self::GetProperty => write!(f, "GetProperty"),
            Self::SetProperty => write!(f, "SetProperty"),
            Self::GetSuper => write!(f, "GetSuper"),
            Self::Equal => write!(f, "Equal"),
            Self::Greater => write!(f, "Greater"),
            Self::Less => write!(f, "Less"),
            Self::Add => write!(f, "Add"),
            Self::Subtract => write!(f, "Subtract"),
            Self::Multiply => write!(f, "Multiply"),
            Self::Divide => write!(f, "Divide"),
            Self::Not => write!(f, "Not"),
            Self::Negate => write!(f, "Negate"),
            Self::Print => write!(f, "Print"),
            Self::Jump => write!(f, "Jump"),
            Self::JumpIfFalse => write!(f, "JumpIfFalse"),
            Self::Loop => write!(f, "Loop"),
            Self::Call => write!(f, "Call"),
            Self::Invoke => write!(f, "Invoke"),
            Self::SuperInvoke => write!(f, "SuperInvoke"),
            Self::Closure => write!(f, "Closure"),
            Self::CloseUpvalue => write!(f, "CloseUpvalue"),
            Self::Return => write!(f, "Return"),
            Self::Struct => write!(f, "Class"),
            Self::Inherit => write!(f, "Inherit"),
            Self::Method => write!(f, "Method"),
            Self::Unknown => write!(f, "Unknown"),
        }
    }
}
